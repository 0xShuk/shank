use proc_macro2::TokenStream;
use quote::quote;
use shank_macro_impl::builder::Builder;
use shank_macro_impl::syn::Result as ParseResult;

mod render_builders;
use self::render_builders::generate_builders;

pub fn render_builders_impl(
    builder_item: &Builder,
) -> ParseResult<TokenStream> {
    let builders = builder_item
        .variants
        .iter()
        .map(|variant| generate_builders(&builder_item.ident, variant))
        .collect::<Vec<TokenStream>>();

    Ok(quote! {
            pub mod builders {
                use super::*;

                /// Trait that defines the interface for creating an instruction.
                pub trait InstructionBuilder {
                    fn instruction(&self) -> solana_program::instruction::Instruction;
                }

                /// Trait that defines the interface for the autogenerated function that creates an instruction.
                pub trait DefaultInstructionBuilder: InstructionBuilder {
                    fn default_instruction(&self) -> solana_program::instruction::Instruction;
                }

                /// Default implementation of `DefaultInstructionBuilder` trait.
                ///
                /// The implementaiton delegates the call to `DefaultInstructionBuilder::default_instruction`,
                /// which is the autogenerated function that creates an instruction based on the shank annotation.
                impl<T: DefaultInstructionBuilder> InstructionBuilder for T {
                    fn instruction(&self) -> solana_program::instruction::Instruction {
                        self.default_instruction()
                    }
                }

                #(#builders)*
        }
    })
}
